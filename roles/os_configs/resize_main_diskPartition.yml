---
# - name: Resize partitions and swap space
#  hosts: all
#  become: yes
#  gather_facts: yes
  #NOTE: The above are assumed from the wrapper as we cannot have conflicting actions, so they're commented out here.

# WARNING! This playbook ASSUMES that the host it's targeting is built from the known base image
# Meaning it assumes the following:
# 1. All partitions listed are in order on disk from "Start of Disk" to "End of Disk"
# 2. Only 1 Disk mounted on /dev/sda
# 3. Main partition at /dev/sda1
# 4. Extended Partition at /dev/sda2
# 5. Swap Partition at /dev/sda5
# 6. This playbook may not work for VMs with very large disks due to the way the disk_percent_free_for_swap is calculated.
#     The growpart tool only has --free-percent parameter instead of a fixed amount of space to leave for swap.
#     As such it should be used on VMs with disks between 7-100 GB in size.

    # NOTE: Moved to the wrapper playbook and the below will be executed as a list of tasks.
#  tasks:

# NOTE TO FUTURE SELF: Consider replacing the parted shell commands with the parted module for better.
# https://docs.ansible.com/ansible/latest/collections/community/general/parted_module.html
  ################### DELETING SWAP PARTITION ###################

    - name: Turn off swap
      ansible.builtin.command: "sudo swapoff -a"

    - name: Remove lines containing UUID swap entries in /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        state: absent
        regexp: '^.*UUID=.*\s+swap\s+.*$'

    - name: Delete extended and swap partitions
      ansible.builtin.parted:
        device: /dev/sda
        number: "{{ item }}"
        state: absent
      loop:
        - 2 # Extended Partition
        - 5 # Swap Partition
      ignore_errors: yes # Assuming the partitions may not exist

    - name: Update initramfs
      ansible.builtin.command: "sudo update-initramfs -u"

    - name: Reboot to apply changes
      ansible.builtin.reboot:
        reboot_timeout: 600

    ################### EXPANDING PRIMARY PARTITION ###################

    # We're getting disk size via a CLI command because for some reason the facts in gatherfacts doesn't seem to accurately get the full physical disk size, and it's difficult to parse.
    - name: Get total size of disk
      ansible.builtin.shell: lsblk -b --output SIZE -n -d /dev/sda
      register: disk_size

    - name: Parse disk size
      ansible.builtin.set_fact:
        disk_size_bytes: "{{ disk_size.stdout_lines[0] | int }}"

    - name: Debug intermediate values for disk_percent_free_for_swap calculation
      ansible.builtin.debug:
        msg:
          - "ansible_memtotal_mb: {{ ansible_memtotal_mb }}"
          - "disk_size_bytes: {{ disk_size_bytes }}"
          - "Calculated disk_percent_free_for_swap: {{ ((ansible_memtotal_mb | int * 1024 * 1024) / (disk_size_bytes | int)) * 100 | round | int}}"

    - name: Calculate memory-to-disk ratio
      ansible.builtin.set_fact: # Convert memory to bytes, then calculate ratio. I'm trying to ensure the swap is the same size as the physical memory.
       disk_percent_free_for_swap: "{{ ((ansible_memtotal_mb | int * 1024 * 1024) / (disk_size_bytes | int)) * 100 | round | int}}"

    # Ansible is giving me a lot of grief when I try to round this number, so I'll just do it via a shell command
    - name: Round the memory-to-disk percentage to the nearest integer
      ansible.builtin.shell: printf "%.f\n" "{{ disk_percent_free_for_swap }}"
      register: rounded_disk_percent_free_for_swap

    - name: Debug rounded disk percent free for swap
      ansible.builtin.debug:
        msg: "Rounded Disk Percent Free for Swap: {{ rounded_disk_percent_free_for_swap.stdout }}%"

#   NOTE: As of 2024-03-31 the parted community module is unable to override the prompt when resizing a mounted partition, so we'll go back to using a shell command
        # https://stackoverflow.com/questions/73407684/ansible-community-parted-module-asking-are-you-sure-you-want-to-continue-is-t
        # NOTE TO FUTURE SELF: This could be an opportunity to participate in something opensource by modifying the underlying python.
#    - name: Extend /dev/sda1 partition to fill all available space leaving some space for swap partition
#      community.general.parted:
#        device: /dev/sda
#        number: "1"
#        part_end: "{{ rounded_disk_percent_free_for_swap.stdout }}%"
#        resize: true
#        state: present
#        align: "optimal"

    - name: Grow the main partition leaving some space for swap
      ansible.builtin.command: "sudo growpart /dev/sda 1 --free-percent={{ rounded_disk_percent_free_for_swap.stdout }}%"

    - name: Resize the main filesystem
      ansible.builtin.command: "sudo resize2fs /dev/sda1"

################### CREATING SWAP PARTITION ###################

    - name: Get start of swap space between last partition and swap
      # Get space from the start of the unallocated space to the end of the disk
      ansible.builtin.shell: "printf '%.f\n' $( expr $(sudo parted -s /dev/sda unit B print free | grep 'Free Space' | tail -1 | tr -d 'B' | awk '{print $1}'))"
      register: start_of_swap_space_bytes

    - name: Debug start of start and end of swap space
      ansible.builtin.debug:
          msg:
          - "{{start_of_swap_space_bytes.stdout}}"
          - "{{disk_size_bytes}}"

    # Turns out neither ansible nor bash can handle math with large floating point numbers, so I'm going to have to do it in python.
    - name: Get disk swap partition start percentage
      ansible.builtin.shell: python3 -c "print(round(({{start_of_swap_space_bytes.stdout}}/{{disk_size_bytes}})*100))"
      register: disk_swap_partition_start_percent

    - name: Debug disk swap partition start percentage
      ansible.builtin.debug:
        msg: "disk_swap_partition_start_p: {{ disk_swap_partition_start_percent.stdout }}"

    # Turns out it cannot run while mounted
    # fatal: [dockerhost1.internal.levantine.io]: FAILED! => {"changed": false, "err": "Error: Partition(s) on /dev/sda are being used.\n", "msg": "Error while running parted script: /usr/sbin/parted -s -m -a optimal /dev/sda -- unit % mklabel gpt mkpart primary 92% 100%", "out": "", "rc": 1}
#    - name: Create a new swap partition
#      community.general.parted:
#        device: /dev/sda
#        number: 2
#        state: present
#        label: gpt
#        name: swap
#        part_type: primary
#        part_start: "{{disk_swap_partition_start_percent.stdout}}%"
#        unit: "%"
#        part_end: "100%"
#        align: "optimal"

    - name: Create a swap partition using remaining free space
      ansible.builtin.command: "sudo parted --script /dev/sda mkpart primary linux-swap {{disk_swap_partition_start_percent.stdout}}% 100% set 2 --align optimal"
      ignore_errors: yes # For some reason it exits code 1, but the partition is created

    - name: Verify the swap partition was created
      ansible.builtin.shell: "sudo parted -s /dev/sda print free | grep swap"
      # If there are no matches, the swap partition was not created and will return exit code 1, failing the task

    - name: Format the swap partition
      ansible.builtin.command: "sudo mkswap /dev/sda2"

    - name: Get UUID of the newly created swap partition
      ansible.builtin.command: "sudo blkid -o value -s UUID /dev/sda2"
      register: swap_uuid

    - name: Add swap entry to /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "UUID={{ swap_uuid.stdout.strip() }}   none   swap   sw   0   0"
        state: present

    - name: Re-enable swap
      ansible.builtin.command: "sudo swapon -a"

  ################### CLEAN UP STEPS ###################

    - name: Update initramfs
      ansible.builtin.command: "sudo update-initramfs -u"

    - name: Reboot to apply changes
      ansible.builtin.reboot:
        reboot_timeout: 300

    - name: Create lock file
      ansible.builtin.copy:
        content: |
          This is a lock file to prevent multiple runs of the resize partition task
          from the ansible playbook "roles/os_configs/resize_main_diskPartition.yml"
          This is meant to be run only once when the VM is created and bootstrapped.
        dest: /var/tmp/resize_partition_playbook_lock.txt