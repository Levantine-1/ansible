---
  - name: Parse the kubeadm join command token
    ansible.builtin.shell:
        cmd: echo "{{ kubeadm_init.stdout }}" | sed '1,/join any number of worker nodes/d' | grep 'kubeadm join' | sed -n 's/.*--token \([a-zA-Z0-9\.\-]*\) .*/\1/p'
    register: kubeadm_init_join_token
    when: node is defined and node == "controller"
    no_log: true

  - name: Parse the kubeadm join command ca cert hash
    ansible.builtin.shell:
        cmd: echo "{{ kubeadm_init.stdout }}" | sed '1,/join any number of worker nodes/d' | grep 'discovery' | cut -d ':' -f 2
    register: kubeadm_init_join_ca_cert_hash
    when: node is defined and node == "controller"
    no_log: true

  - name: Store tokens in hashicorp vault
    community.hashi_vault.vault_write:
        url: "{{ vault_addr }}"
        token: "{{ vault_token }}"
        path: "{{ vault_secret_path }}/tokens"
        data:
            data:
                token: "{{ kubeadm_init_join_token.stdout }}"
                discovery-token-ca-cert-hash: "{{ 'sha256:' ~ kubeadm_init_join_ca_cert_hash.stdout }}"
    no_log: true

  - name: Define list of certificates
    set_fact:
        cert_files:                         # Indexes
            - apiserver.crt                 # 0
            - apiserver-etcd-client.crt     # 1
            - apiserver-etcd-client.key     # 2
            - apiserver.key                 # 3
            - apiserver-kubelet-client.crt  # 4
            - apiserver-kubelet-client.key  # 5
            - ca.crt                        # 6
            - ca.key                        # 7
            - front-proxy-ca.crt            # 8
            - front-proxy-ca.key            # 9
            - front-proxy-client.crt        # 10
            - front-proxy-client.key        # 11
            - sa.key                        # 12
            - sa.pub                        # 13

  - name: Retrieve certificates
    ansible.builtin.slurp:
        src: "/etc/kubernetes/pki/{{ item }}"
    register: slurped_certs
    loop: "{{ cert_files }}"
    no_log: true

  - name: Store certificates in Vault
    community.hashi_vault.vault_write:
        url: "{{ vault_addr }}"
        token: "{{ vault_token }}"
        path: "{{ vault_secret_path }}/certificates"
        data:
            data:
                apiserver.crt: "{{ slurped_certs.results[0].content | b64decode }}"
                apiserver-etcd-client.crt: "{{ slurped_certs.results[1].content | b64decode }}"
                apiserver-etcd-client.key: "{{ slurped_certs.results[2].content | b64decode }}"
                apiserver.key: "{{ slurped_certs.results[3].content | b64decode }}"
                apiserver-kubelet-client.crt: "{{ slurped_certs.results[4].content | b64decode }}"
                apiserver-kubelet-client.key: "{{ slurped_certs.results[5].content | b64decode }}"
                ca.crt: "{{ slurped_certs.results[6].content | b64decode }}"
                ca.key: "{{ slurped_certs.results[7].content | b64decode }}"
                front-proxy-ca.crt: "{{ slurped_certs.results[8].content | b64decode }}"
                front-proxy-ca.key: "{{ slurped_certs.results[9].content | b64decode }}"
                front-proxy-client.crt: "{{ slurped_certs.results[10].content | b64decode }}"
                front-proxy-client.key: "{{ slurped_certs.results[11].content | b64decode }}"
                sa.key: "{{ slurped_certs.results[12].content | b64decode }}"
                sa.pub: "{{ slurped_certs.results[13].content | b64decode }}"
    no_log: true

  - name: Define list of etcd certificates
    set_fact:
        etcd_cert_files:                # Indexes
            - ca.crt                    # 0
            - ca.key                    # 1
            - healthcheck-client.crt    # 2
            - healthcheck-client.key    # 3
            - peer.crt                  # 4
            - peer.key                  # 5
            - server.crt                # 6
            - server.key                # 7

  - name: Retrieve certificates
    ansible.builtin.slurp:
        src: "/etc/kubernetes/pki/etcd/{{ item }}"
    register: slurped_etcd_certs
    loop: "{{ etcd_cert_files }}"
    no_log: true

  - name: Store certificates in Vault
    community.hashi_vault.vault_write:
        url: "{{ vault_addr }}"
        token: "{{ vault_token }}"
        path: "{{ vault_secret_path }}/etcd_certificates"
        data:
            data:
                etcd-ca.crt: "{{ slurped_etcd_certs.results[0].content | b64decode }}"
                etcd-ca.key: "{{ slurped_etcd_certs.results[1].content | b64decode }}"
                etcd-healthcheck-client.crt: "{{ slurped_etcd_certs.results[2].content | b64decode }}"
                etcd-healthcheck-client.key: "{{ slurped_etcd_certs.results[3].content | b64decode }}"
                etcd-peer.crt: "{{ slurped_etcd_certs.results[4].content | b64decode }}"
                etcd-peer.key: "{{ slurped_etcd_certs.results[5].content | b64decode }}"
                etcd-server.crt: "{{ slurped_etcd_certs.results[6].content | b64decode }}"
                etcd-server.key: "{{ slurped_etcd_certs.results[7].content | b64decode }}"
    no_log: true