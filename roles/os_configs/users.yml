---
- name: Setup users and configure sudoers
  hosts: all
  become: true
  gather_facts: false
  vars:
    enabled_users:
      - name: automation
        authorized_key: ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAlK9SYgHttisI9NMozvE0HNroEK2bBG406szUfIGz1Xq+CGTdW1x197nBh36zqa5gYbhQCM/uGKOaGCPB+6R6gW0CpaHjPvcKW+pKAUaEWkQzeRYaS1yEJjD4Fh+DFqgaYKh+VTCH7RC2c6N+YdKKJkaSan2iaI9Z5nLjAxJloepbJBTDnhPQVasqNUykh6ZbYyYM5p3EEhYPrw5bMZJJkyHV44UexfqBmroSgbA87PtyUw/+9T9aG3yYwtAafUZJlZpWbeHdMRW/SVYmt/wCze5x+IAxqjk+48b8HeltR5Nys33VSQybuKNrcnumDNzthLFMQvF4ABO66yCTQ5NaBQ== automation

    disabled_users:
      - name: example
        authorized_key: example

# NOTE: This default user is only used once to initialize the users on a new VM, after that it will be removed.
    default_user: debian
    default_password: password

  tasks:
    # The golden image only has a default user, so we need to login with the default user to create the new users
    # and after that the default user will be removed. Subsequent runs will use the new users to login.
    - name: Attempt Login with default user
      ansible.builtin.expect:
        command: "sshpass -p '{{ default_password }}' ssh {{ default_user }}@{{ inventory_hostname }}"
        responses:
          "password": "{{ default_password }}"
          "yes/no": "yes"
          "continue connecting": "yes"
      delegate_to: localhost
      register: ssh_result
      ignore_errors: yes

    - name: Create users
      user:
        name: "{{ item.name }}"
        state: present
        shell: /bin/bash
      with_items: "{{ enabled_users }}"

    - name: Ensure authorized key exist for users
      authorized_key:
        user: "{{ item.name }}"
        state: present
        key: "{{ item.authorized_key }}"
      with_items: "{{ enabled_users }}"

    - name: Remove users
      user:
        name: "{{ item.name }}"
        state: absent
        shell: /bin/bash
      with_items: "{{ disabled_users }}"