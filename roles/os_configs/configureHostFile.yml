---
- name: Manage entries in the /etc/hosts file
  hosts: all
  become: yes
  # Note: In the future, we'll be using DNS forwards instead of /etc/hosts; this is just a temporary solution

  tasks:
    - name: Read the existing /etc/hosts file
      shell: cat /etc/hosts
      register: current_hosts
      changed_when: false
      check_mode: false

    - name: Set the content of the /etc/hosts file
      set_fact:
        hosts_content: "{{ current_hosts.stdout }}"

    - name: Show current /etc/hosts content
      debug:
        var: hosts_content

    - name: Add or update host entries
      block:
        - name: Show list of host_entries
          debug:
            var: host_entries

        - name: Add host entries
          lineinfile:
            path: /etc/hosts
            line: "{{ item.ip }} {{ item.hostname }}"
            state: present
          loop: "{{ host_entries }}"
          when: "'{} '.format(item.hostname) not in hosts_content"

        - name: Update host entries if IP changed
          lineinfile:
            path: /etc/hosts
            regexp: "^{{ item.ip }}\\s+"
            line: "{{ item.ip }} {{ item.hostname }}"
            state: present
          loop: "{{ host_entries }}"
          when: "'{} '.format(item.hostname) in hosts_content and item.ip != host_entries | get_host_ip(item.hostname)"

    - name: Show updated /etc/hosts content
      shell: cat /etc/hosts
      register: updated_hosts
      changed_when: false
      check_mode: false
      when: hosts_content != updated_hosts.stdout
      ignore_errors: yes

    - name: Remove outdated host entries
      lineinfile:
        path: /etc/hosts
        state: absent
        regex: "^{{ entry.ip }}\\s+{{ entry.hostname }}$"
      loop: "{{ host_entries }}"
      loop_control:
        loop_var: entry
      when: "'{} '.format(entry.hostname) not in hosts_content"

  handlers:
    - name: Reload the hosts file
      shell: "cat /etc/hosts > /dev/null"  # Touch the file to trigger the reload
