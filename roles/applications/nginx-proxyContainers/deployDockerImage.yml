---
- name: Deploy Docker Image
  hosts: VMWareDockerHosts
  gather_facts: true
  become: true

  # vars:
    # variable container_name is defined as an extra var

  vars_files:
    - ../../../vault.yml

  tasks:
#    - name: Validate Supported Container
#      debug:
#        msg: "Checking to see if container is supported"
#      failed_when: container_name == 'nginx-proxy' or container_name not in supported_containers
#
#    - name: Copy docker image tarball from ansible host to remote host
#      copy:
#        src: "/tmp/{{ container_name }}_latest.tar"
#        dest: "/tmp/{{ container_name }}_latest.tar"
#
#    - name: Stop the old Docker container (if exists)
#      docker_container:
#        name: "{{ container_name }}"
#        state: stopped
#        timeout: 30
#        container_default_behavior: no_defaults
#      ignore_errors: yes
#
#    - name: Extract image name and tag from tarball
#      shell: "docker load --input /tmp/{{ container_name }}_latest.tar | awk '{print $3}'"
#      register: loaded_image_name
#
#    - name: Loaded docker image name
#      debug:
#        msg: "{{ loaded_image_name.stdout }}"
#
#    - name: Load Docker Image from Tarball
#      docker_image:
#        name: "{{ loaded_image_name.stdout }}"
#        load_path: "/tmp/{{ container_name }}_latest.tar"
#        source: load
#
#    - name: Retrieve SplunkForwarder Token from HashiCorp Vault
#      # NOTE: This token is created manually under splunk>settings>data inputs>HTTP Event Collector and stored in vault at path below
#      set_fact:
#        splunk_creds: "{{ lookup('hashi_vault', 'secret=kv/data/splunk/http_access_tokens/docker token={{ hashicorp_vault_token }} url={{ hashicorp.vault.address }}') }}"

    - name: debug group var
      debug:
        var: supported_containers[container_name]['env_vars']['DATA_GATEWAY_API_KEY_PATH']

    - name: Retrieve DataGateway Secrets from HashiCorp Vault
      set_fact:
        datagateway_creds: "{{ lookup('hashi_vault', 'secret=' + supported_containers[container_name]['env_vars']['DATA_GATEWAY_API_KEY_PATH'] + ' token=' + hashicorp_vault_token + ' url=' + hashicorp.vault.address) }}"
      when: supported_containers[container_name]['env_vars']['DATA_GATEWAY_API_KEY_PATH'] is defined
      register: retrieve_dgw_secrets

    - name: debug datagateway_creds
      debug:
        var: datagateway_creds

    - name: Extract DataGateway API Key from DGW Secrets and add to env_vars
      set_fact:
        env_vars: "{{ supported_containers[container_name]['env_vars'] | combine({'DATA_GATEWAY_API_KEY': datagateway_creds.data.api_key}) }}"
      when: retrieve_dgw_secrets is defined

    - name: Run Docker Container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ loaded_image_name.stdout }}"
        env: "{{ supported_containers[container_name]['env_vars'] }}"
        log_driver: splunk
        log_options:
          splunk-token: "{{ splunk_creds.token }}"
          splunk-url: "http://{{ splunk.server.host }}:{{ splunk.forwarders.http_event_collector_port }}"
          splunk-insecureskipverify: "{{ splunk.forwarders.insecureskipverify }}"
          splunk-source: "{{ container_name }}"

    - name: Prune Docker
      command: docker system prune -af