---
- name: Deploy Docker image from ECR
  hosts: VMWareDockerHosts
  gather_facts: yes

  # vars:
    # variable container_name is defined as an extra var

  tasks:
    - name: Validate Supported Container
      debug:
        msg: "Checking to see if container is supported"
      failed_when: container_name == 'nginx-proxy' or container_name not in supported_containers

    - name: Authenticate Docker with ECR
      command: $(aws ecr get-login --no-include-email)
      args:
        executable: /bin/bash
      register: ecr_login_output
      changed_when: false

    - name: Get the latest Docker image from ECR
      shell: |
        aws ecr describe-images --repository-name "{{ supported_containers[container_name].ecr_repo }}" --query 'sort_by(imageDetails, &imagePushedAt) | [-1].imageDigest' --output text --region "{{ aws.default_region }}"
      register: latest_image

    - name: Pull the latest Docker image from ECR
      docker_image:
        name: "{{ supported_containers[container_name].ecr_repo }}/latest_image"
        source: pull
        state: present
        aws_region: "{{ aws.default_region }}"
        aws_registry_url: "{{ supported_containers[container_name].ecr_repo }}"

    - name: Stop the old Docker container (if exists)
      docker_container:
        name: container_name
        state: stopped
        timeout: 30
      ignore_errors: yes

    - name: Run the Docker container
      docker_container:
        name: container_name
        image: your_ecr_repository_uri/your_image_name
        state: started
        restart_policy: always
        published_ports: "your_host_port:your_container_port"
        env:  # Add any environment variables if needed
          YOUR_ENV_VARIABLE: "your_value"

    - name: Prune Docker images
      command: docker image prune -a -f

    - name: Prune Docker containers
      command: docker container prune -a -f