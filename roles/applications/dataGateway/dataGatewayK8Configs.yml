# https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
#   ansible-galaxy collection install kubernetes.core
#     python >= 3.9
#     kubernetes >= 24.2.0
#     PyYAML >= 3.11
#     jsonpatch

---
  - name: Deploy DataGateway Kubernetes Configurations
    hosts: DataGatewayK8Cluster
    become: yes
    gather_facts: yes

    vars:
      aws_environment: # These will be filled in by the HashiCorp Vault lookup in this playbook
        AWS_ACCESS_KEY_ID: "{{ aws_creds.access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_creds.secret_key }}"

    vars_files:
      - ../../../vault.yml

    tasks:

      - name: Retrieve AWS Credentials from HashiCorp Vault
        # NOTE: The secret path is created in the main terraform repo when the user is created and key stored in vault at path below
        set_fact:
          aws_creds: "{{ lookup('hashi_vault', 'secret={{ DataGatewayK8Cluster.vault_aws_iam_key_path }} token={{ hashicorp_vault_token }} url={{ hashicorp.vault.address }}') }}"
        when: node is defined and node == "controller"

      - name: Retrieve Database Credentials from HashiCorp Vault
        set_fact:
          db_creds: "{{ lookup('hashi_vault', 'secret={{ DataGatewayK8Cluster.spring_datasource_password_vault_path }} token={{ hashicorp_vault_token }} url={{ hashicorp.vault.address }}') }}"
        when: node is defined and node == "controller"

      - name: Start a local Docker registry
        docker_container:
          name: registry
          image: registry:2
          state: started
          ports:
            - "5000:5000"
          container_default_behavior: no_defaults
        when: node is defined and node == "controller"

      - name: Log in to AWS ECR
        shell: "aws ecr get-login-password --region {{ aws.default_region }} | docker login --username AWS --password-stdin {{ aws.account_id }}.dkr.ecr.{{ aws.default_region }}.amazonaws.com"
        environment: "{{ aws_environment }}"
        when: node is defined and node == "controller"

      - name: Get the latest Docker image from ECR
        shell: "aws ecr describe-images --repository-name {{ DataGatewayK8Cluster.aws_ecr_repo_name }} --query 'sort_by(imageDetails, &imagePushedAt) | [-1].imageTags[0]' --output text --region {{ aws.default_region }}"
        environment: "{{ aws_environment }}"
        register: latest_image
        when: node is defined and node == "controller"

      - name: Pull the Docker image from ECR
        command: "docker pull {{ aws.account_id }}.dkr.ecr.{{ aws.default_region }}.amazonaws.com/{{ DataGatewayK8Cluster.aws_ecr_repo_name }}:{{ latest_image.stdout }}"
        when: node is defined and node == "controller"

      - name: Tag the Docker image
        command: "docker tag {{ aws.account_id }}.dkr.ecr.{{ aws.default_region }}.amazonaws.com/{{ DataGatewayK8Cluster.aws_ecr_repo_name }}:{{ latest_image.stdout }} localhost:5000/{{ DataGatewayK8Cluster.aws_ecr_repo_name }}:{{ latest_image.stdout }}"
        when: node is defined and node == "controller"

      - name: Push the Docker image to local repo
        command: "docker push localhost:5000/{{ DataGatewayK8Cluster.aws_ecr_repo_name }}:{{ latest_image.stdout }}"
        when: node is defined and node == "controller"

      - name: Create Kubernetes Deployment
        kubernetes.core.k8s:
          state: present
          definition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: datagateway
              namespace: default
            spec:
              replicas: 4
              selector:
                matchLabels:
                  app: datagateway
              template:
                metadata:
                  labels:
                    app: datagateway
                spec:
                  containers:
                    - name: datagateway
                      image: "{{ DataGatewayK8Cluster.control_plane_endpoint }}:5000/{{ DataGatewayK8Cluster.aws_ecr_repo_name }}:{{ latest_image.stdout }}"
                      env:
                        - name: spring.datasource.url
                          value: "{{ DataGatewayK8Cluster.spring_datasource_url }}"
                        - name: spring.datasource.username
                          value: "{{ DataGatewayK8Cluster.spring_datasource_username }}"
                        - name: spring.datasource.password
                          value: "{{ db_creds[DataGatewayK8Cluster.spring_datasource_username] }}"
        when: node is defined and node == "controller"